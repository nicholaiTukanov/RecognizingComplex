module {
  toy.func @main() {
    %0 = toy.constant dense<[[1.000000e+00, 4.000000e+00], [4.000000e+00, 6.000000e+00]]> : tensor<2x2xf64>
    %1 = toy.constant dense<[[1.000000e+00, 3.000000e+00], [4.000000e+00, 6.000000e+00]]> : tensor<2x2xf64>
    %2 = toy.constant dense<[[2.000000e+00, 2.000000e+00], [4.000000e+00, 6.000000e+00]]> : tensor<2x2xf64>
    %3 = toy.constant dense<[[1.000000e+00, 2.000000e+00], [4.000000e+00, 6.000000e+00]]> : tensor<2x2xf64>
    %4 = toy.matmul %3, %1 : tensor<2x2xf64>
    %5 = toy.matmul %2, %0 : tensor<2x2xf64>
    %6 = toy.add %4, %5 : tensor<2x2xf64>
    %7 = toy.matmul %3, %2 : tensor<2x2xf64>
    %8 = toy.matmul %1, %0 : tensor<2x2xf64>
    %9 = toy.sub %7, %8 : tensor<2x2xf64>
    %10 = toy.mul %9, %6 : tensor<2x2xf64>
    toy.print %10 : tensor<2x2xf64>
    toy.return
  }
}
module {
  toy.func @main() {
    %0 = toy.constant dense<[[1.000000e+00, 4.000000e+00], [4.000000e+00, 6.000000e+00]]> : tensor<2x2xf64>
    %1 = toy.constant dense<[[1.000000e+00, 3.000000e+00], [4.000000e+00, 6.000000e+00]]> : tensor<2x2xf64>
    %2 = toy.constant dense<[[2.000000e+00, 2.000000e+00], [4.000000e+00, 6.000000e+00]]> : tensor<2x2xf64>
    %3 = toy.constant dense<[[1.000000e+00, 2.000000e+00], [4.000000e+00, 6.000000e+00]]> : tensor<2x2xf64>
    %4 = toy.complex_mul_kernel %3, %1, %3, %2 : (tensor<2x2xf64>, tensor<2x2xf64>, tensor<2x2xf64>, tensor<2x2xf64>) -> tensor<*xf64>
    %5 = toy.mul %4, %4 : (tensor<*xf64>, tensor<*xf64>) -> tensor<2x2xf64>
    toy.print %5 : tensor<2x2xf64>
    toy.return
  }
}
